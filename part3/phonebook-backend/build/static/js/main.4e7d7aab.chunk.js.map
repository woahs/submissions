{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Persons.js","components/Notification.js","services/persons.js","App.js","index.js"],"names":["Filter","filter","onChange","value","PersonForm","onSubmit","newName","onNameChange","newNumber","onNumberChange","type","Persons","persons","removePerson","person","name","toLowerCase","includes","map","className","number","onClick","id","Notification","message","text","baseUrl","exports","getAll","axios","get","then","response","data","create","newObject","post","update","put","remove","delete","App","useState","setPersons","setNewName","setNewNumber","setFilter","setMessage","useEffect","personService","initPersons","event","target","preventDefault","personObject","personFound","find","p","window","confirm","returnedPerson","concat","setTimeout","catch","err","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4e7d7aab.chunk.js","sourcesContent":["import React from 'react';\n\nconst Filter = ({ filter, onChange }) => {\n  return (\n    <div>\n      filter shown with <input value={filter} onChange={onChange} />\n    </div>\n  );\n};\n\nexport default Filter;\n","import React from 'react';\n\nconst PersonForm = ({ onSubmit, newName, onNameChange, newNumber, onNumberChange }) => {\n  return (\n    <form onSubmit={onSubmit}>\n      <div>\n        name: <input value={newName} onChange={onNameChange} />\n      </div>\n      <div>\n        number: <input value={newNumber} onChange={onNumberChange} />\n      </div>\n      <div>\n        <button type='submit'>add</button>\n      </div>\n    </form>\n  );\n};\n\nexport default PersonForm;\n","import React from 'react';\n\nconst Persons = ({ persons, filter, removePerson }) => {\n  return (\n    <table>\n      <tbody>\n        {persons\n          .filter((person) => person.name.toLowerCase().includes(filter.toLowerCase()))\n          .map((person) => (\n            <tr key={person.id} className='person'>\n              <td>{person.name}</td>\n              <td>{person.number}</td>\n              <td>\n                <button onClick={() => removePerson(person.id)}>delete</button>\n              </td>\n            </tr>\n          ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default Persons;\n","import React from 'react';\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null;\n  }\n\n  return <div className={message.type}>{message.text}</div>;\n};\n\nexport default Notification;\n","import axios from 'axios';\nconst baseUrl = '/api/persons';\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then((response) => response.data);\n};\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then((response) => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then((response) => response.data);\n};\n\nconst remove = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`);\n  return request.then((response) => response.data);\n};\n\nconst exports = { getAll, create, update, remove };\nexport default exports;\n","import React, { useState, useEffect } from 'react';\nimport Filter from './components/Filter';\nimport PersonForm from './components/PersonForm';\nimport Persons from './components/Persons';\nimport Notification from './components/Notification';\nimport personService from './services/persons';\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [filter, setFilter] = useState('');\n  const [message, setMessage] = useState(null);\n\n  useEffect(() => {\n    personService.getAll().then((initPersons) => {\n      setPersons(initPersons);\n    });\n  }, []);\n\n  const addPerson = (event) => {\n    event.preventDefault();\n    const personObject = {\n      name: newName,\n      number: newNumber,\n    };\n\n    if (persons.map((person) => person.name).includes(newName)) {\n      const personFound = persons.find((p) => p.name === newName);\n      if (personFound.number === newNumber) {\n        setMessage({\n          type: 'error',\n          text: `${newName} with number, ${newNumber}, has already been added to phonebook`,\n        });\n      } else {\n        let res = window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`);\n        if (res)\n          personService.update(personFound.id, personObject).then((returnedPerson) => {\n            setPersons(persons.map((person) => (person.id !== personFound.id ? person : returnedPerson)));\n            setMessage({ type: 'success', text: `Updated ${returnedPerson.name}` });\n          });\n      }\n    } else {\n      personService.create(personObject).then((returnedPerson) => {\n        setPersons(persons.concat(returnedPerson));\n        setMessage({ type: 'success', text: `Added ${returnedPerson.name}` });\n      });\n    }\n    setNewName('');\n    setNewNumber('');\n    setTimeout(() => {\n      setMessage(null);\n    }, 5000);\n  };\n\n  const removePerson = (id) => {\n    const personFound = persons.find((p) => p.id === id);\n    personService\n      .remove(id)\n      .then(() => {\n        setPersons(persons.filter((p) => p.id !== id));\n        setMessage({\n          type: 'success',\n          text: `Removed ${personFound.name}`,\n        });\n      })\n      .catch((err) => {\n        setMessage({\n          type: 'error',\n          text: `Information of ${personFound.name} has already been removed from the server`,\n        });\n        setPersons(persons.filter((p) => p.id !== id));\n      });\n    setTimeout(() => {\n      setMessage(null);\n    }, 5000);\n  };\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value);\n  };\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value);\n  };\n\n  const handleFilterChange = (event) => {\n    setFilter(event.target.value);\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} />\n      <Filter filter={filter} onChange={handleFilterChange} />\n      <h3>add a new</h3>\n      <PersonForm\n        onSubmit={addPerson}\n        newName={newName}\n        onNameChange={handleNameChange}\n        newNumber={newNumber}\n        onNumberChange={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n      <Persons persons={persons} filter={filter} removePerson={removePerson} />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}